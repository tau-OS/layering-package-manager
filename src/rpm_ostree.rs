//! # DBus interface proxies for: `org.projectatomic.rpmostree1.Sysroot`, `org.projectatomic.rpmostree1.OS`, `org.projectatomic.rpmostree1.OSExperimental`, `org.projectatomic.rpmostree1.Transaction`
//!
//! This code was generated by `zbus-xmlgen` `3.0.0` from DBus introspection data.
//! Source: `org.projectatomic.rpmostree1.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(
    interface = "org.projectatomic.rpmostree1.Sysroot",
    default_path = "/org/projectatomic/rpmostree1/Sysroot",
    default_service = "org.projectatomic.rpmostree1"
)]
trait Sysroot {
    /// GetOS method
    fn get_os(&self, name: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// RegisterClient method
    fn register_client(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Reload method
    fn reload(&self) -> zbus::Result<()>;

    /// ReloadConfig method
    fn reload_config(&self) -> zbus::Result<()>;

    /// UnregisterClient method
    fn unregister_client(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// ActiveTransaction property
    #[dbus_proxy(property)]
    fn active_transaction(&self) -> zbus::Result<(String, String, String)>;

    /// ActiveTransactionPath property
    #[dbus_proxy(property)]
    fn active_transaction_path(&self) -> zbus::Result<String>;

    /// AutomaticUpdatePolicy property
    #[dbus_proxy(property)]
    fn automatic_update_policy(&self) -> zbus::Result<String>;

    /// Booted property
    #[dbus_proxy(property)]
    fn booted(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Deployments property
    #[dbus_proxy(property)]
    fn deployments(
        &self,
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// Path property
    #[dbus_proxy(property)]
    fn path(&self) -> zbus::Result<String>;
}

#[dbus_proxy(
    interface = "org.projectatomic.rpmostree1.OS",
    default_service = "org.projectatomic.rpmostree1"
)]
trait OS {
    /// AutomaticUpdateTrigger method
    fn automatic_update_trigger(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<(bool, String)>;

    /// Cleanup method
    fn cleanup(&self, elements: &[&str]) -> zbus::Result<String>;

    /// ClearRollbackTarget method
    fn clear_rollback_target(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// Deploy method
    fn deploy(
        &self,
        revision: &str,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// DownloadDeployRpmDiff method
    fn download_deploy_rpm_diff(&self, revision: &str, packages: &[&str]) -> zbus::Result<String>;

    /// DownloadRebaseRpmDiff method
    fn download_rebase_rpm_diff(&self, refspec: &str, packages: &[&str]) -> zbus::Result<String>;

    /// DownloadUpdateRpmDiff method
    fn download_update_rpm_diff(&self) -> zbus::Result<String>;

    /// FinalizeDeployment method
    fn finalize_deployment(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// GetCachedDeployRpmDiff method
    fn get_cached_deploy_rpm_diff(
        &self,
        revision: &str,
        packages: &[&str],
    ) -> zbus::Result<(
        Vec<(
            String,
            u32,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
    )>;

    /// GetCachedRebaseRpmDiff method
    fn get_cached_rebase_rpm_diff(
        &self,
        refspec: &str,
        packages: &[&str],
    ) -> zbus::Result<(
        Vec<(
            String,
            u32,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
    )>;

    /// GetCachedUpdateRpmDiff method
    fn get_cached_update_rpm_diff(
        &self,
        deployid: &str,
    ) -> zbus::Result<(
        Vec<(
            String,
            u32,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
    )>;

    /// GetDeploymentBootConfig method
    fn get_deployment_boot_config(
        &self,
        deployid: &str,
        is_pending: bool,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// GetDeploymentsRpmDiff method
    fn get_deployments_rpm_diff(
        &self,
        deployid0: &str,
        deployid1: &str,
    ) -> zbus::Result<
        Vec<(
            String,
            u32,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
    >;

    /// InitramfsEtc method
    fn initramfs_etc(
        &self,
        track: &[&str],
        untrack: &[&str],
        untrack_all: bool,
        force_sync: bool,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// KernelArgs method
    fn kernel_args(
        &self,
        existing_kernel_arg_string: &str,
        kernel_args_added: &[&str],
        kernel_args_replaced: &[&str],
        kernel_args_removed: &[&str],
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// ModifyYumRepo method
    fn modify_yum_repo(
        &self,
        repo_id: &str,
        settings: std::collections::HashMap<&str, &str>,
    ) -> zbus::Result<String>;

    /// PkgChange method
    fn pkg_change(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        packages_added: &[&str],
        packages_removed: &[&str],
    ) -> zbus::Result<String>;

    /// Rebase method
    fn rebase(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        refspec: &str,
        packages: &[&str],
    ) -> zbus::Result<String>;

    /// RefreshMd method
    fn refresh_md(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// Rollback method
    fn rollback(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// SetInitramfsState method
    fn set_initramfs_state(
        &self,
        regenerate: bool,
        args: &[&str],
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// UpdateDeployment method
    fn update_deployment(
        &self,
        modifiers: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// Upgrade method
    fn upgrade(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// BootedDeployment property
    #[dbus_proxy(property)]
    fn booted_deployment(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// CachedUpdate property
    #[dbus_proxy(property)]
    fn cached_update(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// DefaultDeployment property
    #[dbus_proxy(property)]
    fn default_deployment(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// HasCachedUpdateRpmDiff property
    #[dbus_proxy(property)]
    fn has_cached_update_rpm_diff(&self) -> zbus::Result<bool>;

    /// Name property
    #[dbus_proxy(property)]
    fn name(&self) -> zbus::Result<String>;

    /// RollbackDeployment property
    #[dbus_proxy(property)]
    fn rollback_deployment(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;
}

#[dbus_proxy(
    interface = "org.projectatomic.rpmostree1.OSExperimental",
    default_service = "org.projectatomic.rpmostree1"
)]
trait OSExperimental {
    /// DownloadPackages method
    fn download_packages(&self, queries: &[&str], source: &str) -> zbus::Result<()>;

    /// LiveFs method
    fn live_fs(
        &self,
        options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// Moo method
    fn moo(&self, utf8: bool) -> zbus::Result<String>;
}

#[dbus_proxy(interface = "org.projectatomic.rpmostree1.Transaction")]
trait Transaction {
    /// Cancel method
    fn cancel(&self) -> zbus::Result<()>;

    /// Start method
    fn start(&self) -> zbus::Result<bool>;

    /// DownloadProgress signal
    #[dbus_proxy(signal)]
    fn download_progress(
        &self,
        time: (u64, u64),
        outstanding: (u32, u32),
        metadata: (u32, u32, u32),
        delta: (u32, u32, u32, u64),
        content: (u32, u32),
        transfer: (u64, u64),
    ) -> zbus::Result<()>;

    /// Finished signal
    #[dbus_proxy(signal)]
    fn finished(&self, success: bool, error_message: &str) -> zbus::Result<()>;

    /// Message signal
    #[dbus_proxy(signal)]
    fn message(&self, text: &str) -> zbus::Result<()>;

    /// PercentProgress signal
    #[dbus_proxy(signal)]
    fn percent_progress(&self, text: &str, percentage: u32) -> zbus::Result<()>;

    /// ProgressEnd signal
    #[dbus_proxy(signal)]
    fn progress_end(&self) -> zbus::Result<()>;

    // TODO: This breaks the derive macro
    // /// SignatureProgress signal
    // #[dbus_proxy(signal)]
    // fn signature_progress(
    //     &self,
    //     signature: &[zbus::zvariant::Value<'_>],
    //     commit: &str,
    // ) -> zbus::Result<()>;

    /// TaskBegin signal
    #[dbus_proxy(signal)]
    fn task_begin(&self, text: &str) -> zbus::Result<()>;

    /// TaskEnd signal
    #[dbus_proxy(signal)]
    fn task_end(&self, text: &str) -> zbus::Result<()>;

    /// InitiatingClientDescription property
    #[dbus_proxy(property)]
    fn initiating_client_description(&self) -> zbus::Result<String>;

    /// Title property
    #[dbus_proxy(property)]
    fn title(&self) -> zbus::Result<String>;
}
